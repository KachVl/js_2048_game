{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/cell.js","src/modules/tile.js"],"sourcesContent":["class $f308d607d98b8a0d$export$f6f0c3fe4ec306ea {\n    constructor(gameElement, x, y){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"game-board__cell\");\n        gameElement.append(cell);\n        this.x = x;\n        this.y = y;\n    }\n    static getScore() {\n        return $f308d607d98b8a0d$var$gameScore;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    unlinkTile() {\n        this.linkedTile = null;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    hasTileForMerge() {\n        return !!this.linkedTileForMerge;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        this.linkedTile.setValue(this.linkedTile.value + this.linkedTile.value);\n        $f308d607d98b8a0d$var$gameScore += this.linkedTile.value;\n        this.linkedTileForMerge.removeFromDOM();\n        this.unlinkTileForMerge();\n        $f308d607d98b8a0d$var$displayScore();\n    }\n    resetScore() {\n        $f308d607d98b8a0d$var$gameScore = 0;\n        $f308d607d98b8a0d$var$displayScore();\n    }\n}\nlet $f308d607d98b8a0d$var$gameScore = 0;\nconst $f308d607d98b8a0d$var$scoreDisplay = document.querySelector(\".game-score\");\nfunction $f308d607d98b8a0d$var$displayScore() {\n    $f308d607d98b8a0d$var$scoreDisplay.textContent = `${$f308d607d98b8a0d$var$gameScore}`;\n}\n\n\nconst $a5fd07fa01589658$var$GAME_FIELD_SIZE = 4;\nconst $a5fd07fa01589658$var$CELLS_COUNT = $a5fd07fa01589658$var$GAME_FIELD_SIZE * $a5fd07fa01589658$var$GAME_FIELD_SIZE;\nclass $a5fd07fa01589658$export$985739bfa5723e08 {\n    constructor(gameElement){\n        this.cells = [];\n        this.score = (0, $f308d607d98b8a0d$export$f6f0c3fe4ec306ea).getScore();\n        for(let i = 0; i < $a5fd07fa01589658$var$CELLS_COUNT; i++)this.cells.push(new (0, $f308d607d98b8a0d$export$f6f0c3fe4ec306ea)(gameElement, i % $a5fd07fa01589658$var$GAME_FIELD_SIZE, Math.floor(i / $a5fd07fa01589658$var$GAME_FIELD_SIZE)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        // eslint-disable-next-line prettier/prettier\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((row)=>// eslint-disable-next-line comma-dangle, prettier/prettier\n            [\n                ...row\n            ].reverse());\n    }\n    getScore() {\n        this.score = (0, $f308d607d98b8a0d$export$f6f0c3fe4ec306ea).getScore();\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n    resetScore() {\n        this.cells[0].resetScore();\n    }\n}\n\n\nclass $186b2060016e101f$export$235cb65c20ad2b7 {\n    constructor(gameElement){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"tile\");\n        this.setValue(Math.random() > 0.1 ? 2 : 4);\n        gameElement.append(this.tileElement);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        this.value = value;\n        this.tileElement.textContent = this.value;\n        const bgColor = $186b2060016e101f$var$colorChanging(value);\n        this.tileElement.style.setProperty(\"--tile-color\", bgColor);\n        if (this.value === 2048) $186b2060016e101f$var$gameWin();\n    }\n    removeFromDOM() {\n        this.tileElement.remove();\n    }\n    waitForTransitionEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n    waitForAnimationEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"animationend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\nfunction $186b2060016e101f$var$colorChanging(value) {\n    switch(value){\n        case 2:\n            return \"#fff\";\n        case 4:\n            return \"#fffbd7\";\n        case 8:\n            return \"#fff6a3\";\n        case 16:\n            return \"#ffec36\";\n        case 32:\n            return \"#ffc800\";\n        case 64:\n            return \"#ffa400\";\n        case 128:\n            return \"#ff7600\";\n        case 256:\n            return \"#ff5200\";\n        case 512:\n            return \"#ff0000\";\n        case 1024:\n            return \"#af0000\";\n        case 2048:\n            return \"#00ff37\";\n    }\n}\nfunction $186b2060016e101f$var$gameWin() {\n    const messageWin = document.querySelector(\".message-win\");\n    messageWin.classList.remove(\"hidden\");\n}\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$gameBoard = document.getElementById(\"game-board\");\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$985739bfa5723e08)($09e991522ca7e64e$var$gameBoard);\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\"#ourButton\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$gameOverMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$buttonStart.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.getRandomEmptyCell().linkTile(new (0, $186b2060016e101f$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n        $09e991522ca7e64e$var$game.getRandomEmptyCell().linkTile(new (0, $186b2060016e101f$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n    } else if ($09e991522ca7e64e$var$buttonStart.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$restartGame();\n        $09e991522ca7e64e$var$game.getRandomEmptyCell().linkTile(new (0, $186b2060016e101f$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n        $09e991522ca7e64e$var$game.getRandomEmptyCell().linkTile(new (0, $186b2060016e101f$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    }\n    if (!$09e991522ca7e64e$var$gameOverMessage.classList.contains(\"hidden\")) {\n        $09e991522ca7e64e$var$gameOverMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$setupInputOnce();\n    }\n    if (!$09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) {\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$setupInputOnce();\n    }\n});\n$09e991522ca7e64e$var$setupInputOnce();\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    if ($09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n    $09e991522ca7e64e$var$game.getScore();\n}\nasync function $09e991522ca7e64e$var$handleInput(pressedKey) {\n    switch(pressedKey.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    const newTile = new (0, $186b2060016e101f$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$game.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) {\n        await newTile.waitForAnimationEnd();\n        $09e991522ca7e64e$var$gameOver();\n        return;\n    }\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nasync function $09e991522ca7e64e$var$moveUp() {\n    await $09e991522ca7e64e$var$moveTiles($09e991522ca7e64e$var$game.cellsGroupedByColumn);\n}\nasync function $09e991522ca7e64e$var$moveDown() {\n    await $09e991522ca7e64e$var$moveTiles($09e991522ca7e64e$var$game.cellsGroupedByReversedColumn);\n}\nasync function $09e991522ca7e64e$var$moveLeft() {\n    await $09e991522ca7e64e$var$moveTiles($09e991522ca7e64e$var$game.cellsGroupedByRow);\n}\nasync function $09e991522ca7e64e$var$moveRight() {\n    await $09e991522ca7e64e$var$moveTiles($09e991522ca7e64e$var$game.cellsGroupedByReversedRow);\n}\nasync function $09e991522ca7e64e$var$moveTiles(groupedCells) {\n    const promises = [];\n    groupedCells.forEach((group)=>$09e991522ca7e64e$var$moveTilesInGroup(group, promises));\n    await Promise.all(promises);\n    $09e991522ca7e64e$var$game.cells.forEach((cell)=>{\n        // eslint-disable-next-line no-unused-expressions\n        cell.hasTileForMerge() && cell.mergeTiles();\n    });\n}\nfunction $09e991522ca7e64e$var$moveTilesInGroup(group, promises) {\n    for(let i = 1; i < group.length; i++){\n        if (group[i].isEmpty()) continue;\n        const cellWithTile = group[i];\n        let targetCell;\n        let j = i - 1;\n        while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n            targetCell = group[j];\n            j--;\n        }\n        if (!targetCell) continue;\n        promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n        if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n        else targetCell.linkTileForMerge(cellWithTile.linkedTile);\n        cellWithTile.unlinkTile();\n    }\n}\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsGroupedByColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsGroupedByReversedColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsGroupedByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRight() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$game.cellsGroupedByReversedRow);\n}\nfunction $09e991522ca7e64e$var$canMove(groupedCells) {\n    return groupedCells.some((group)=>$09e991522ca7e64e$var$canMoveInGroup(group));\n}\nfunction $09e991522ca7e64e$var$canMoveInGroup(group) {\n    return group.some((cell, index)=>{\n        if (index === 0) return false;\n        if (cell.isEmpty()) return false;\n        const targetCell = group[index - 1];\n        return targetCell.canAccept(cell.linkedTile);\n    });\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.cells.forEach((cell)=>{\n        if (!cell.isEmpty()) {\n            cell.linkedTile.removeFromDOM();\n            cell.unlinkTile();\n        }\n    });\n    $09e991522ca7e64e$var$game.resetScore();\n}\nfunction $09e991522ca7e64e$var$gameOver() {\n    $09e991522ca7e64e$var$gameOverMessage.classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.6661975f.js.map\n","'use strict';\n\nimport { Game } from '../modules/Game.class';\nimport { Tile } from '../modules/tile';\n\nconst gameBoard = document.getElementById('game-board');\n\nconst game = new Game(gameBoard);\n\nconst buttonStart = document.querySelector('#ourButton');\nconst messageStart = document.querySelector('.message-start');\nconst gameOverMessage = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbuttonStart.addEventListener('click', () => {\n  if (buttonStart.classList.contains('start')) {\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n    messageStart.classList.add('hidden');\n    game.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n    game.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n    buttonStart.textContent = 'Restart';\n  } else {\n    if (buttonStart.classList.contains('restart')) {\n      restartGame();\n      game.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n      game.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n    }\n  }\n\n  if (!gameOverMessage.classList.contains('hidden')) {\n    gameOverMessage.classList.add('hidden');\n    setupInputOnce();\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n    setupInputOnce();\n  }\n});\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  if (messageWin.classList.contains('hidden')) {\n    window.addEventListener('keydown', handleInput, { once: true });\n  }\n  game.getScore();\n}\n\nasync function handleInput(pressedKey) {\n  switch (pressedKey.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  game.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    await newTile.waitForAnimationEnd();\n    gameOver();\n\n    return;\n  }\n\n  setupInputOnce();\n}\n\nasync function moveUp() {\n  await moveTiles(game.cellsGroupedByColumn);\n}\n\nasync function moveDown() {\n  await moveTiles(game.cellsGroupedByReversedColumn);\n}\n\nasync function moveLeft() {\n  await moveTiles(game.cellsGroupedByRow);\n}\n\nasync function moveRight() {\n  await moveTiles(game.cellsGroupedByReversedRow);\n}\n\nasync function moveTiles(groupedCells) {\n  const promises = [];\n\n  groupedCells.forEach((group) => moveTilesInGroup(group, promises));\n\n  await Promise.all(promises);\n\n  game.cells.forEach((cell) => {\n    // eslint-disable-next-line no-unused-expressions\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n}\n\nfunction moveTilesInGroup(group, promises) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(game.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(game.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(game.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(game.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some((group) => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n\nfunction restartGame() {\n  game.cells.forEach((cell) => {\n    if (!cell.isEmpty()) {\n      cell.linkedTile.removeFromDOM();\n      cell.unlinkTile();\n    }\n  });\n\n  game.resetScore();\n}\n\nfunction gameOver() {\n  gameOverMessage.classList.remove('hidden');\n}\n","import { Cell } from './cell';\n\nconst GAME_FIELD_SIZE = 4;\nconst CELLS_COUNT = GAME_FIELD_SIZE * GAME_FIELD_SIZE;\n\nexport class Game {\n  constructor(gameElement) {\n    this.cells = [];\n    this.score = Cell.getScore();\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(\n          gameElement,\n          i % GAME_FIELD_SIZE,\n          Math.floor(i / GAME_FIELD_SIZE),\n        ),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(\n      (column) => [...column].reverse(),\n    );\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    // eslint-disable-next-line prettier/prettier\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((row) =>\n      // eslint-disable-next-line comma-dangle, prettier/prettier\n      [...row].reverse(),);\n  }\n\n  getScore() {\n    this.score = Cell.getScore();\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter((cell) => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  resetScore() {\n    this.cells[0].resetScore();\n  }\n}\n","export class Cell {\n  constructor(gameElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('game-board__cell');\n    gameElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  static getScore() {\n    return gameScore;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return (\n      this.isEmpty() ||\n      (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n    );\n  }\n\n  mergeTiles() {\n    this.linkedTile.setValue(this.linkedTile.value + this.linkedTile.value);\n    gameScore += this.linkedTile.value;\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n    displayScore();\n  }\n\n  resetScore() {\n    gameScore = 0;\n\n    displayScore();\n  }\n}\n\nlet gameScore = 0;\nconst scoreDisplay = document.querySelector('.game-score');\n\nfunction displayScore() {\n  scoreDisplay.textContent = `${gameScore}`;\n}\n","export class Tile {\n  constructor(gameElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n    gameElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = this.value;\n\n    const bgColor = colorChanging(value);\n\n    this.tileElement.style.setProperty('--tile-color', bgColor);\n\n    if (this.value === 2048) {\n      gameWin();\n    }\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd() {\n    return new Promise((resolve) => {\n      this.tileElement.addEventListener('transitionend', resolve, {\n        once: true,\n      });\n    });\n  }\n\n  waitForAnimationEnd() {\n    return new Promise((resolve) => {\n      this.tileElement.addEventListener('animationend', resolve, {\n        once: true,\n      });\n    });\n  }\n}\n\nfunction colorChanging(value) {\n  switch (value) {\n    case 2:\n      return '#fff';\n    case 4:\n      return '#fffbd7';\n    case 8:\n      return '#fff6a3';\n    case 16:\n      return '#ffec36';\n    case 32:\n      return '#ffc800';\n    case 64:\n      return '#ffa400';\n    case 128:\n      return '#ff7600';\n    case 256:\n      return '#ff5200';\n    case 512:\n      return '#ff0000';\n    case 1024:\n      return '#af0000';\n    case 2048:\n      return '#00ff37';\n  }\n}\n\nfunction gameWin() {\n  const messageWin = document.querySelector('.message-win');\n\n  messageWin.classList.remove('hidden');\n}\n"],"names":["$f308d607d98b8a0d$export$f6f0c3fe4ec306ea","constructor","gameElement","x","y","cell","document","createElement","classList","add","append","getScore","$f308d607d98b8a0d$var$gameScore","linkTile","tile","setXY","linkedTile","unlinkTile","isEmpty","linkTileForMerge","linkedTileForMerge","unlinkTileForMerge","hasTileForMerge","canAccept","newTile","value","mergeTiles","setValue","removeFromDOM","$f308d607d98b8a0d$var$displayScore","resetScore","$f308d607d98b8a0d$var$scoreDisplay","querySelector","textContent","$186b2060016e101f$export$235cb65c20ad2b7","tileElement","Math","random","style","setProperty","bgColor","$186b2060016e101f$var$colorChanging","messageWin","remove","waitForTransitionEnd","Promise","resolve","addEventListener","once","waitForAnimationEnd","$09e991522ca7e64e$var$gameBoard","getElementById","$09e991522ca7e64e$var$game","cells","score","i","$a5fd07fa01589658$var$GAME_FIELD_SIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","getRandomEmptyCell","emptyCells","filter","randomIndex","length","reduce","groupedCells","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$gameOverMessage","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$setupInputOnce","contains","window","$09e991522ca7e64e$var$handleInput","pressedKey","key","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$moveUp","$09e991522ca7e64e$var$canMoveDown","$09e991522ca7e64e$var$moveDown","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$moveLeft","$09e991522ca7e64e$var$canMoveRight","$09e991522ca7e64e$var$moveRight","$09e991522ca7e64e$var$moveTiles","promises","forEach","group","$09e991522ca7e64e$var$moveTilesInGroup","targetCell","cellWithTile","j","all","$09e991522ca7e64e$var$canMove","some","index"],"version":3,"file":"index.6661975f.js.map"}